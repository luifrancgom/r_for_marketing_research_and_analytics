---
title: "Identifying Drivers of Outcomes: Linear Models"
author: Luis Francisco Gomez Lopez
institute: FAEDIS
date: 2023-10-31 14:38:43
format:
  beamer:
    colortheme: dolphin
    fonttheme: structurebold
    theme: AnnArbor
    urlcolor: blue
    include-in-header:
      - text: |
          \usepackage{booktabs}
          \usepackage{longtable}
          \usepackage{array}
          \usepackage{multirow}
          \usepackage{wrapfig}
          \usepackage{float}
          \usepackage{colortbl}
          \usepackage{pdflscape}
          \usepackage{tabu}
          \usepackage{threeparttable}
          \usepackage{threeparttablex}
          \usepackage[normalem]{ulem}
          \usepackage{makecell}
          \usepackage{xcolor}
editor: visual
bibliography: r_for_marketing_research_and_analytics.bib
---

```{r}
#| echo: false
#| message: false
library(tidyverse)
library(skimr)
library(tidymodels)
```

# Contents

-   Please Read Me
-   Purpose
-   Amusement park survey
-   References

# Please Read Me

-   This presentation is based on [@chapman_r_2019, Chapter 7]

# Purpose

-   

# Amusement park survey

-   **weekend**: whether the visit was on a weekend
-   **num.child**: number of children in the visit
-   **distance**: how far the customer traveled to the park in miles
-   **rides**: satisfaction with rides using a scale [0, 100]
-   **games**: satisfaction with games using a scale [0, 100]
-   **wait**: satisfaction with waiting times using a scale [0, 100]
-   **clean**: satisfaction with cleanliness using a scale [0, 100]
-   **overall**: overall satisfaction rating using a scale [0, 100]

# Amusement park survey

-   Import data

\tiny

```{r}
#| echo: true
amusement_park <- read_csv("http://goo.gl/HKnl74")
amusement_park |> head(n = 5)
```

# Amusement park survey

-   Transform data

\tiny

```{r}
#| echo: true
amusement_park <- amusement_park |> 
  mutate(weekend = factor(x = weekend, 
                          labels = c('no', 'yes'),
                          ordered = FALSE),
         num.child = as.integer(num.child),
         # logarithmic transform
         logdist = log(distance, base = exp(x = 1)))
amusement_park |> head(n = 5)
```

# Amusement park survey

-   Summarize data

    -   Ups the table is really big!!! Try it in your console to see the complete table

\tiny

```{r}
#| echo: true
amusement_park |> skim()
```

# Amusement park survey

-   Correlation matrices

    -   Pearson correlation coefficients for samples in a tibble

\tiny

```{r}
#| echo: true
#| out-width: 80%
correlation_matrix <- amusement_park |> 
  select(num.child, rides:logdist) |>
  corrr::correlate()
correlation_matrix
```

# Amusement park survey

-   Correlation matrices

    -   Pearson correlation coefficients for samples in a tibble

\tiny

```{r}
#| echo: true
#| out-width: 50%
#| fig-align: center
correlation_matrix |> autoplot(triangular = "lower")
```

# Amusement park survey

-   **Bivariate Association: the base R way**

\tiny

```{r}
#| echo: true
#| out-width: 60%
#| fig-align: center
plot(overall~rides, data=amusement_park,
     xlab="Satisfaction with Rides", ylab="Overall Satisfaction")
abline(reg = lm(formula = overall~rides, data = amusement_park), 
       col = 'blue')
```

# Amusement park survey

-   **Bivariate Association: the tidyverse way**

\tiny

```{r}
#| echo: true
#| out-width: 55%
#| fig-align: center
amusement_park |> ggplot(aes(x = rides, y = overall)) +
  geom_point() + 
  geom_smooth(method = 'lm', 
              color = 'blue', 
              se = FALSE) + 
  labs(x = "Satisfaction with Rides",
       y = "Overall Satisfaction")
```

# Amusement park survey

-   Linear Model with a Single Predictor

```{r}
#| echo: false
#| out-width: 65%
#| fig-align: center
# A tutorial related to set.seed
## https://r-coder.com/set-seed-r/
set.seed(12345)
toy_data <- amusement_park |> 
  slice_sample(n = 15)

toy_model <- lm(formula = overall ~ rides, data = toy_data)

augment(x = toy_model) |> 
  ggplot(aes(x = rides, y = overall)) + 
  geom_point(shape = 21, 
             color = 'black', fill = '#E31A1C',
             size = 2) +
  geom_smooth(method = 'lm', 
              color = '#2C3E50',
              se = FALSE) + 
  geom_segment(aes(xend=rides, yend=.fitted),
               color='#CCBE93') + 
  labs(x = "Satisfaction with Rides",
       y = "Overall Satisfaction")
```

# Amusement park survey

-   Linear Model with a Single Predictor

$$overall_{i} = \beta_0 + \beta_1 rides_i + \epsilon_i \text{ where } \epsilon_i \sim \mathcal{N}(0, \sigma^2) \text{ and } i = 1, \ldots, 500$$ $$\widehat{overall}_{i} = \widehat{\beta}_0 + \widehat{\beta}_1 rides_i \text{ and } \widehat{\sigma}^2 \text{ where } i = 1, \ldots, 500$$ $$overall_{i} - \widehat{overall}_{i} = \widehat{\epsilon}_i \text{ where } i = 1, \ldots, 500$$

\tiny

```{r}
#| echo: true
model1 <- lm(formula = overall ~ rides, data = amusement_park)
model1
```

# Amusement park survey

-   Linear Model with a Single Predictor

\tiny

```{r}
#| echo: true
ls.str(model1)
```

# Amusement park survey

-   Linear Model with a Single Predictor

\tiny

```{r}
#| echo: true
summary(model1)
```

# Amusement park survey

-   Linear Model with a Single Predictor

\tiny

```{r}
#| echo: true
model1$coefficients
# Make some predictions
# We want to forecast the overall satisfaction rating
# if the satisfaction with rides is 95
-94.962246 + 1.703285*95
```

# Amusement park survey

-   Linear Model with a Single Predictor

    -   Std. Error column

        -   Indicates uncertainty in the coefficient estimate
        -   We can build a confidence interval

\tiny

```{r}
#| echo: true
summary(model1)$coefficients[, 2]
confint(model1, level = 0.95)
```

# Amusement park survey

-   Linear Model with a Single Predictor

\tiny

```{r}
#| echo: true
#| out-width: 60%
#| fig-align: center
par(mfrow=c(2,2))
plot(model1)
par(mfrow=c(1,1))
```

# Amusement park survey

-   Linear Model with a Single Predictor

    -   **Linearity**: plot $(1,1)$

        -   Reference line should be flat and horizontal

    -   **Normality of residuals**: plot $(1,2)$

        -   Dots should fall along the line

    -   **Homogeneity of variance**: plot $(2,1)$

        -   Reference line should be flat and horizontal

    -   **Influential observations**: plot $(2,2)$

        -   Points should be inside the contour lines

# Amusement park survey

-   Linear Model with Multiple Predictors

$$\begin{split}
   overall_{i} & = \beta_0 + \beta_1 rides_i + \beta_2 games_i \\
   & + \beta_3 wait_i + \beta_3 clean_i + \epsilon_i \\
   & \text{ where } \epsilon_i \sim \mathcal{N}(0, \sigma^2) \text{ and } i = 1, \ldots, 500
   \end{split}$$

\tiny

```{r}
#| echo: true
model2 <- lm(formula = overall ~ rides + games + wait + clean, 
             data = amusement_park)
model2
```

# Amusement park survey

-   Linear Model with Multiple Predictors

\tiny

```{r}
#| echo: true
#| out-width: 60%
#| fig-align: center
par(mfrow=c(2,2))
plot(model2)
par(mfrow=c(1,1))
```

# Amusement park survey

-   Linear Model with Multiple Predictors

\tiny

```{r}
#| echo: true
summary(model2)
```

# Amusement park survey

-   Linear Model with Multiple Predictors

$H_0: \beta_{rides} = 0$

$H_1: \beta_{rides} \neq 0$

$t_{rides} = \frac{\hat{\beta}_{rides} - \beta_{rides}}{\widehat{Var(\hat{\beta}_{rides})}} = \frac{0.529078 - 0}{0.14207176} = 3.724019$

\tiny

```{r}
#| echo: true
model2$coefficients
# Calculate the variance-covariance matrix, extract
# the diagonal and calculate the standard deviaton of
# the parameters
model2 |> vcov() |> diag() |> sqrt()
```

# Amusement park survey

-   Linear Model with Multiple Predictors

```{r}
#| echo: false
#| out-width: 70%
#| fig-align: center
t_test_rides <- summary(model2)$coefficients[, 3][2]
degrees_of_freedom <- summary(model2)$df[2]

ggplot() + 
  geom_function(fun=dt, args=list(df=degrees_of_freedom),
                xlim=c(-5,5),
                color='#2C3E50') +
  geom_vline(xintercept = qt(p = 0.025, df = degrees_of_freedom, ncp = 0, 
                             lower.tail = TRUE),
             color="#E31A1C") +
  geom_vline(xintercept = qt(p = 0.025, df = degrees_of_freedom, ncp = 0, 
                             lower.tail = FALSE),
             color="#E31A1C") +
  geom_vline(xintercept = t_test_rides |> round(digits = 2) |> unname(),
             color="#18BC9C") +
  geom_ribbon(data = tibble(x = seq.int(from = -5,
                                        to = qt(p = 0.025, df = degrees_of_freedom, ncp = 0, 
                                                lower.tail = TRUE),
                                        by = 0.01),
                            y = dt(x = x, df = degrees_of_freedom, ncp = 0)),
              aes(x=x, ymin = 0, ymax=y),
              fill='#CCBE93', alpha=0.5) +
  geom_ribbon(data = tibble(x = seq.int(from = qt(p = 0.025, df = degrees_of_freedom, ncp = 0, 
                                                  lower.tail = FALSE),
                                        to = 5,
                                        by = 0.01),
                            y = dt(x = x, df = degrees_of_freedom, ncp = 0)),
              aes(x=x, ymin = 0, ymax=y),
              fill='#CCBE93', alpha=0.5) +
  scale_x_continuous(breaks = c(-5,
                                t_test_rides,
                                qt(p = 0.025, df = degrees_of_freedom, ncp = 0, 
                                   lower.tail = TRUE),
                                qt(p = 0.025, df = degrees_of_freedom, ncp = 0, 
                                   lower.tail = FALSE),
                                5),
                     labels = scales::label_number(accuracy = 0.01)) +
  labs(x=NULL,
       y=NULL,
       color=NULL,
       title = "Student's t-distribution distribution function",
       subtitle = str_glue('Degrees of freedom= {summary(model2)$df[2]},
                           Critical values: ({qt(p = 0.025, df = degrees_of_freedom, ncp = 0, 
                                                lower.tail = TRUE) |> round(digits=2)},{qt(p = 0.025, df = degrees_of_freedom, ncp = 0, 
                                                lower.tail = FALSE) |> round(digits=2)})
                           T statistic: {t_test_rides |> round(digits=2)}')) +
  theme(panel.border      = element_rect(fill = NA, color = "black"),
        plot.background   = element_rect(fill = "#f3fcfc"),
        panel.background  = element_rect(fill = "#f3f7fc"),
        plot.title        = element_text(face = "bold"),
        axis.title        = element_text(face = "bold"),
        legend.title      = element_text(face = "bold"),
        legend.position   = 'bottom', 
        axis.text         = element_text(face = "bold"))
```

# Amusement park survey

-   Linear Model with Multiple Predictors

\tiny

```{r}
#| echo: true
confint(model2, level = 0.95)
```

# Amusement park survey

-   Linear Model with Multiple Predictors

\tiny

```{r}
#| echo: true
#| out-width: 50%
#| fig-align: center
library(coefplot) # Remember to install the package if it is not installed
coefplot(model = model2, 
         # The intercept is relatively large: -131.4092 
         intercept = FALSE,
         ylab="Rating of Feature", 
         xlab="Association with Overall Satisfaction",
         lwdOuter = 1.5)
```

# Amusement park survey

-   Comparing models

\tiny

```{r}
#| echo: true
#| out-width: 50%
#| fig-align: center
summary(model1)$r.squared
summary(model2)$r.squared
summary(model1)$adj.r.squared
summary(model2)$adj.r.squared
```

# Amusement park survey

-   Comparing models

    -   **Base R way**

\tiny

```{r}
#| echo: true
#| out-width: 50%
#| fig-align: center
plot(x = amusement_park$overall, y = fitted(model1),
     col = "red", xlim = c(0,100), ylim = c(0,100),
     xlab = "Actual Overall Satisfaction", 
     ylab = "Fitted Overall Satisfaction")
points(x = amusement_park$overall, y = fitted(model2),
       col = "blue")
legend(x = "topleft", legend = c("Model 1", "Model 2"), col = c("red", "blue"), pch = 1)
```

# Amusement park survey

-   Comparing models

    -   **Tidymodels and tidyverse way**: Prepare data

\tiny
        
```{r}
#| echo: true
model1_augment <- augment(x = model1) |> mutate(model = "Model 1")
model2_augment <- augment(x = model2) |> mutate(model = "Model 2")
models_performance <- model1_augment |> bind_rows(model2_augment)

models_performance |> glimpse()
```

# Amusement park survey

-   Comparing models

    -   **Tidymodels and tidyverse way**: Visualize
    
\tiny

```{r}
#| echo: true
#| out-width: 50%
#| fig-align: center
models_performance |> 
  ggplot() +
  geom_point(aes(x = overall, y = .fitted,
                 color = model)) +
  labs(x = "Actual Overall Satisfaction",
       y = "Fitted Overall Satisfaction")
```

# Amusement park survey

-   Predictions

$$\begin{split}
   overall_{j} & = \widehat{\beta}_0 + \widehat{\beta}_1 rides_j + \widehat{\beta}_2 games_j \\
   & + \widehat{\beta}_3 wait_j + \widehat{\beta}_3 clean_j
   \end{split}$$

\tiny

```{r}
#| echo: true
coef(model2) |> enframe(name = "coef")
```

# Amusement park survey

-   Predictions

    -   Manual   

\tiny

```{r}
#| echo: true
(coef(model2)["(Intercept)"] + 
    coef(model2)["rides"]*30 + 
    coef(model2)["games"]*10 + 
    coef(model2)["wait"]*57 + 
    coef(model2)["clean"])*90 |>
  unname()
```

# References
